kind: PersistentVolume
apiVersion: v1
metadata:
  name: wsl-{{ .Values.targetEnv }}-pv
  labels:
    type: local
    app: wsl-{{ .Values.targetEnv }}
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/wsl/data"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: wsl-{{ .Values.targetEnv }}
  name: wsl-{{ .Values.targetEnv }}-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi    
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wsl-{{ .Values.targetEnv }}
  # namespace: {{ .Values.targetNS }}
spec:
  replicas: {{ .Values.autoscaling.minReplicas }}
  selector:
    matchLabels:
      app: wsl-{{ .Values.targetEnv }}
  template:
    metadata:
      labels:
        app: wsl-{{ .Values.targetEnv }}
    spec:
      volumes:
        - name: {{ .Values.service_name }}-bootstrap-cm-vol
          # Populate the volume with config map data
          configMap:
            # `name` here must match the name 
            # specified in the ConfigMap's YAML 
            name: {{ .Values.service_name }}-bootstrap-cm-{{ .Values.targetEnv }}
        - name: wslenv-vol-{{ .Values.targetEnv }}
          secret:
            secretName: wsl-secret-{{ .Values.targetEnv }}
            items:
            - key: env_file
              path: .env
        - name: wsl-{{ .Values.targetEnv }}-vol
          persistentVolumeClaim:
            claimName: wsl-{{ .Values.targetEnv }}-pvc
      containers:
        - name: wsl-{{ .Values.targetEnv }}
          image: {{ .Values.targetImage }}:{{ .Values.targetImageTag }}
          ports:
            - containerPort: 80
          env:
            - name: "APACHE_CONFDIR"
              value: "/etc/apache2"
            - name: "APACHE_DOCUMENT_ROOT"
              value: "/var/www/html/public"
            - name: "APACHE_ENVVARS"
              value: "/etc/apache2/envvars"
            # - name: DYNAMIC_SCRIPTS_PATH
            #   value: "/var/www/html/writable"
            - name: DYNAMIC_SCRIPTS_PATH
              value: "/tmp"
            - name: APACHE_RUN_USER
              value: "www-data"
            - name: APACHE_RUN_GROUP
              value: "www-data"
            - name: APACHE_PID_FILE
              value: "/var/run/apache2$SUFFIX.pid"
            - name: APACHE_RUN_DIR
              value: "/var/run/apache2$SUFFIX"
            - name: APACHE_LOG_DIR
              value: "/var/log/apache2$SUFFIX"
          imagePullPolicy: Always
          lifecycle:
            postStart:
              exec:
                command: ["/bin/sh", "-c", "stat -c %a /tmp && ls -la /tmp && cp /tmp/configmap/wslbootstrap.sh /usr/local/bin/wslbootstrap.sh && chmod +x /usr/local/bin/wslbootstrap.sh && sh /usr/local/bin/wslbootstrap.sh"]
          volumeMounts:
            - name: wsl-{{ .Values.targetEnv }}-vol
              mountPath: /var/www/html  
            - name: wslenv-vol-{{ .Values.targetEnv }}
              mountPath: /tmp/secrets
              # `bootstrap` mount bash script from configmap {{ .Values.service_name }}-bootstrap-cm-{{ .Values.targetEnv }}
              # execute in the poststrat lifecycle hook
            - name: {{ .Values.service_name }}-bootstrap-cm-vol
              mountPath: /tmp/configmap            